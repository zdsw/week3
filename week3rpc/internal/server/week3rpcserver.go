// Code generated by goctl. DO NOT EDIT.
// Source: week3rpc.proto

package server

import (
	"context"

	"zg4-1/src/rk/week3/week3rpc/internal/logic"
	"zg4-1/src/rk/week3/week3rpc/internal/svc"
	"zg4-1/src/rk/week3/week3rpc/week3rpc"
)

type Week3rpcServer struct {
	svcCtx *svc.ServiceContext
	week3rpc.UnimplementedWeek3RpcServer
}

func NewWeek3rpcServer(svcCtx *svc.ServiceContext) *Week3rpcServer {
	return &Week3rpcServer{
		svcCtx: svcCtx,
	}
}

// 单条件搜索接口
func (s *Week3rpcServer) Search(ctx context.Context, in *week3rpc.SearchRequest) (*week3rpc.SearchResponse, error) {
	l := logic.NewSearchLogic(ctx, s.svcCtx)
	return l.Search(in)
}

// 多条件搜索接口
func (s *Week3rpcServer) ManySearch(ctx context.Context, in *week3rpc.ManySearchRequest) (*week3rpc.ManySearchResponse, error) {
	l := logic.NewManySearchLogic(ctx, s.svcCtx)
	return l.ManySearch(in)
}

// 分页搜索接口
func (s *Week3rpcServer) PaginationSearch(ctx context.Context, in *week3rpc.PaginationSearchRequest) (*week3rpc.PaginationSearchResponse, error) {
	l := logic.NewPaginationSearchLogic(ctx, s.svcCtx)
	return l.PaginationSearch(in)
}

// es同步
func (s *Week3rpcServer) Synchronous(ctx context.Context, in *week3rpc.SynchronousRequest) (*week3rpc.SynchronousResponse, error) {
	l := logic.NewSynchronousLogic(ctx, s.svcCtx)
	return l.Synchronous(in)
}

// 上传
func (s *Week3rpcServer) Upload(ctx context.Context, in *week3rpc.UploadRequest) (*week3rpc.UploadResponse, error) {
	l := logic.NewUploadLogic(ctx, s.svcCtx)
	return l.Upload(in)
}

// 回滚
func (s *Week3rpcServer) Rollback(ctx context.Context, in *week3rpc.RollbackRequest) (*week3rpc.RollbackResponse, error) {
	l := logic.NewRollbackLogic(ctx, s.svcCtx)
	return l.Rollback(in)
}
