// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: week3rpc.proto

package week3rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Week3Rpc_Search_FullMethodName           = "/week3rpc.Week3rpc/search"
	Week3Rpc_ManySearch_FullMethodName       = "/week3rpc.Week3rpc/many_search"
	Week3Rpc_PaginationSearch_FullMethodName = "/week3rpc.Week3rpc/PaginationSearch"
	Week3Rpc_Synchronous_FullMethodName      = "/week3rpc.Week3rpc/synchronous"
	Week3Rpc_Upload_FullMethodName           = "/week3rpc.Week3rpc/upload"
	Week3Rpc_Rollback_FullMethodName         = "/week3rpc.Week3rpc/rollback"
)

// Week3RpcClient is the client API for Week3Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Week3RpcClient interface {
	// 单条件搜索接口
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// 多条件搜索接口
	ManySearch(ctx context.Context, in *ManySearchRequest, opts ...grpc.CallOption) (*ManySearchResponse, error)
	// 分页搜索接口
	PaginationSearch(ctx context.Context, in *PaginationSearchRequest, opts ...grpc.CallOption) (*PaginationSearchResponse, error)
	// es同步
	Synchronous(ctx context.Context, in *SynchronousRequest, opts ...grpc.CallOption) (*SynchronousResponse, error)
	// 上传
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	// 回滚
	Rollback(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error)
}

type week3RpcClient struct {
	cc grpc.ClientConnInterface
}

func NewWeek3RpcClient(cc grpc.ClientConnInterface) Week3RpcClient {
	return &week3RpcClient{cc}
}

func (c *week3RpcClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, Week3Rpc_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *week3RpcClient) ManySearch(ctx context.Context, in *ManySearchRequest, opts ...grpc.CallOption) (*ManySearchResponse, error) {
	out := new(ManySearchResponse)
	err := c.cc.Invoke(ctx, Week3Rpc_ManySearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *week3RpcClient) PaginationSearch(ctx context.Context, in *PaginationSearchRequest, opts ...grpc.CallOption) (*PaginationSearchResponse, error) {
	out := new(PaginationSearchResponse)
	err := c.cc.Invoke(ctx, Week3Rpc_PaginationSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *week3RpcClient) Synchronous(ctx context.Context, in *SynchronousRequest, opts ...grpc.CallOption) (*SynchronousResponse, error) {
	out := new(SynchronousResponse)
	err := c.cc.Invoke(ctx, Week3Rpc_Synchronous_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *week3RpcClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, Week3Rpc_Upload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *week3RpcClient) Rollback(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error) {
	out := new(RollbackResponse)
	err := c.cc.Invoke(ctx, Week3Rpc_Rollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Week3RpcServer is the server API for Week3Rpc service.
// All implementations must embed UnimplementedWeek3RpcServer
// for forward compatibility
type Week3RpcServer interface {
	// 单条件搜索接口
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// 多条件搜索接口
	ManySearch(context.Context, *ManySearchRequest) (*ManySearchResponse, error)
	// 分页搜索接口
	PaginationSearch(context.Context, *PaginationSearchRequest) (*PaginationSearchResponse, error)
	// es同步
	Synchronous(context.Context, *SynchronousRequest) (*SynchronousResponse, error)
	// 上传
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	// 回滚
	Rollback(context.Context, *RollbackRequest) (*RollbackResponse, error)
	mustEmbedUnimplementedWeek3RpcServer()
}

// UnimplementedWeek3RpcServer must be embedded to have forward compatible implementations.
type UnimplementedWeek3RpcServer struct {
}

func (UnimplementedWeek3RpcServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedWeek3RpcServer) ManySearch(context.Context, *ManySearchRequest) (*ManySearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManySearch not implemented")
}
func (UnimplementedWeek3RpcServer) PaginationSearch(context.Context, *PaginationSearchRequest) (*PaginationSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginationSearch not implemented")
}
func (UnimplementedWeek3RpcServer) Synchronous(context.Context, *SynchronousRequest) (*SynchronousResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Synchronous not implemented")
}
func (UnimplementedWeek3RpcServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedWeek3RpcServer) Rollback(context.Context, *RollbackRequest) (*RollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedWeek3RpcServer) mustEmbedUnimplementedWeek3RpcServer() {}

// UnsafeWeek3RpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Week3RpcServer will
// result in compilation errors.
type UnsafeWeek3RpcServer interface {
	mustEmbedUnimplementedWeek3RpcServer()
}

func RegisterWeek3RpcServer(s grpc.ServiceRegistrar, srv Week3RpcServer) {
	s.RegisterService(&Week3Rpc_ServiceDesc, srv)
}

func _Week3Rpc_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Week3RpcServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Week3Rpc_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Week3RpcServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Week3Rpc_ManySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManySearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Week3RpcServer).ManySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Week3Rpc_ManySearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Week3RpcServer).ManySearch(ctx, req.(*ManySearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Week3Rpc_PaginationSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Week3RpcServer).PaginationSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Week3Rpc_PaginationSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Week3RpcServer).PaginationSearch(ctx, req.(*PaginationSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Week3Rpc_Synchronous_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynchronousRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Week3RpcServer).Synchronous(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Week3Rpc_Synchronous_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Week3RpcServer).Synchronous(ctx, req.(*SynchronousRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Week3Rpc_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Week3RpcServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Week3Rpc_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Week3RpcServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Week3Rpc_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Week3RpcServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Week3Rpc_Rollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Week3RpcServer).Rollback(ctx, req.(*RollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Week3Rpc_ServiceDesc is the grpc.ServiceDesc for Week3Rpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Week3Rpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "week3rpc.Week3rpc",
	HandlerType: (*Week3RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "search",
			Handler:    _Week3Rpc_Search_Handler,
		},
		{
			MethodName: "many_search",
			Handler:    _Week3Rpc_ManySearch_Handler,
		},
		{
			MethodName: "PaginationSearch",
			Handler:    _Week3Rpc_PaginationSearch_Handler,
		},
		{
			MethodName: "synchronous",
			Handler:    _Week3Rpc_Synchronous_Handler,
		},
		{
			MethodName: "upload",
			Handler:    _Week3Rpc_Upload_Handler,
		},
		{
			MethodName: "rollback",
			Handler:    _Week3Rpc_Rollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "week3rpc.proto",
}
